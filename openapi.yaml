swagger: "2.0"
info:
  version: "1.0.0"
  title: "Ecommerce API"
paths:
  /login:
    post:
      summary: "User Login"
      description: "Checks if the user exists, logs in, and provides access and refresh tokens."
      tags:
        - Login APIs
      parameters:
        - in: body
          name: body
          description: "User credentials for login"
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: "Successful operation"
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: "user found"
              data:
                type: object
                properties:
                  role:
                    type: string
                    example: "String"
                  email:
                    tyep: string
                    example: "String"
                  full_name:
                    type: string
                    example: "String"
                  access_token:
                    type: string
                    example: "String"
                  refresh_token:
                    type: string
                    example: "String"
        400:
          description: "Invalid email or password"
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: "user not found"
              data:
                type: object
                example: {}

  /generate-otp:
    post:
      summary: "Generate OTP"
      description: "Generates OTP and triggers email notification to the user."
      tags:
        - Login APIs
      parameters:
        - in: body
          name: email
          description: "User's email address"
          required: true
          schema:
            type: string
      responses:
        default:
          description: "Successful operation"
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: "OTP sent"
              data:
                type: object
                example: {}

  /reset-password:
    patch:
      summary: "Reset Password"
      description: "Verify OTP sent and update password."
      tags:
        - Login APIs
      parameters:
        - in: body
          name: body
          description: "User email, OTP, and new password for resetting"
          required: true
          schema:
            type: object
            properties:
              user_id:
                type: string
              otp:
                type: string
              new_password:
                type: string
      responses:
        default:
          description: "Successful operation"
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: "New Password updated"
              data:
                type: object
                example: {}

  /refresh-auth:
    post:
      summary: "Refresh Access Token"
      description: "Re-generates Access token using refresh token."
      tags:
        - Auth APIs
      parameters:
        - in: body
          name: body
          description: "Refresh token for generating new access token"
          required: true
          schema:
            type: object
            properties:
              refresh_token:
                type: string
      responses:
        default:
          description: "Successful operation"
          schema:
            type: object
            properties:
              accessToken:
                type: string
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiTXVyYWxpIiwiaWF0IjoxNzE4MzQ0ODUwfQ.nWvHIFI3X_ii6J38pdUdkuKTiSeiy5Ly9SAF6VymbI8"

  /user/create-user:
    post:
      summary: "Create User"
      description: "Create a new user and initialize cart and wishlist."
      tags:
        - Customer APIs
      parameters:
        - in: body
          name: body
          description: "User details for registration"
          required: true
          schema:
            type: object
            properties:
              full_name:
                type: string
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: "Successful operation"
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: "User registered"
              data:
                type: object
                properties:
                  user_id:
                    type: string
                    example: "String"
        500:
          description: "Internal Server Error"

  /get-product-parameters:
    get:
      summary: "Get Product Parameters"
      description: "Fetch product parameters like categories, colors, and sizes."
      tags:
        - Customer APIs
      parameters:
        - in: header
          name: BEARER Token
          description: "Bearer token for authorization"
          required: true
          example: "BEARER eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiTXVyYWxpIiwiaWF0IjoxNzE4MzQ0ODUwfQ.nWvHIFI3X_ii6J38pdUdkuKTiSeiy5Ly9SAF6VymbI8"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: "Product Parameters fetched."
              data:
                type: object
                properties:
                  categories:
                    type: array
                    items:
                      type: object
                      properties:
                        category_id:
                          type: string
                          example: "String"
                        category_name:
                          type: string
                          example: "String"
                  colors:
                    type: array
                    items:
                      type: object
                      properties:
                        color_id:
                          type: string
                          example: "String"
                        color_name:
                          type: string
                          example: "String"
                        color_code:
                          type: string
                          example: "#FFFFFF"
                  sizes:
                    type: array
                    items:
                      type: object
                      properties:
                        size_id:
                          type: string
                          example: "String"
                        size_name:
                          type: string
                          example: "String"
        default:
          description: "Error while fetching"
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: "Error while fetching"
              data:
                type: object
                example: {}

  /home:
    get:
      summary: "Fetch Home Page Data"
      description: "Fetch banner and recently arrived products for the home page."
      tags:
        - Customer APIs
      parameters:
        - in: header
          name: BEARER Token
          description: "Bearer token for authorization"
          required: true
          example: "BEARER eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiTXVyYWxpIiwiaWF0IjoxNzE4MzQ0ODUwfQ.nWvHIFI3X_ii6J38pdUdkuKTiSeiy5Ly9SAF6VymbI8"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: "Home page data fetched."
              data:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        product_id:
                          type: string
                          example: "String"
                        product_name:
                          type: string
                          example: "String"
                        description:
                          type: string
                          example: "String"
                        images:
                          type: array
                          items:
                            type: string
                          example: ["String"]
                        size_ids:
                          type: array
                          items:
                            type: string
                          example: ["String"]
                        color_ids:
                          type: array
                          items:
                            type: string
                          example: ["String"]
                        price:
                          type: number
                          example: 0.0
                        category_id:
                          type: string
                          example: "String"
                        rating:
                          type: number
                          example: 0.0
                        quantity:
                          type: number
                          example: 0
        default:
          description: "Error while fetching"
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: "Error while fetching"
              data:
                type: object
                properties:
                example: {}

  /list-products:
    get:
      summary: "List Products"
      description: "Fetch list of products filtered by category or all products."
      tags:
        - Product APIs
      parameters:
        - in: header
          name: BEARER Token
          description: "Bearer token for authorization"
          required: true
          example: "BEARER eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiTXVyYWxpIiwiaWF0IjoxNzE4MzQ0ODUwfQ.nWvHIFI3X_ii6J38pdUdkuKTiSeiy5Ly9SAF6VymbI8"
        - in: query
          name: page
          description: "Page number"
          required: false
          schema:
            type: number
        - in: query
          name: limit
          description: "Number of items per page"
          required: false
          schema:
            type: number
        - in: query
          name: search
          description: "Search query by product name"
          required: false
          schema:
            type: string
        - in: query
          name: sort_by
          description: "Sort products by price, rating, or recent"
          required: false
          schema:
            type: string
        - in: query
          name: category_id
          description: "Filter products by category ID"
          required: false
          schema:
            type: string or array
        - in: query
          name: color_id
          description: "Filter products by color ID"
          required: false
          schema:
            type: string
      responses:
        200:
          description: "Successful operation"
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: "Products list fetched."
              data:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        product_id:
                          type: string
                          example: "String"
                        product_name:
                          type: string
                          example: "String"
                        description:
                          type: string
                          example: "String"
                        images:
                          type: array
                          items:
                            type: string
                          example: ["String"]
                        size_ids:
                          type: array
                          items:
                            type: string
                          example: ["String"]
                        color_ids:
                          type: array
                          items:
                            type: string
                          example: ["String"]
                        price:
                          type: number
                          example: 0.0
                        category_id:
                          type: string
                          example: "String"
                        product_status:
                          type: string
                          example: "available"
                        rating:
                          type: number
                          example: 0.0
                        quantity:
                          type: number
                          example: 0
                  sizes:
                    type: array
                    items: 
                     type: string
                  total_pages:
                    type: number
                    example: 1
                  current_page:
                    type: number
                    example: 1
                  total_products:
                    type: number
                    example: 0
        default:
          description: "Error while fetching"
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: "Error while fetching"
              data:
                type: object
                properties:
                  reason:
                    type: string
                    example: ""

  /products/:product_id:
    get:
      summary: "Get Product Details"
      description: "Fetch details of a specific product by product ID."
      tags:
        - Product APIs
      parameters:
        - in: header
          name: BEARER Token
          description: "Bearer token for authorization"
          required: true
          example: "BEARER eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiTXVyYWxpIiwiaWF0IjoxNzE4MzQ0ODUwfQ.nWvHIFI3X_ii6J38pdUdkuKTiSeiy5Ly9SAF6VymbI8"
        - in: path
          name: product_id
          description: "ID of the product to fetch"
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: "Products details fetched."
              data:
                type: object
                properties:
                  product_id:
                    type: string
                    example: "String"
                  product_name:
                    type: string
                    example: "String"
                  description:
                    type: string
                    example: "String"
                  images:
                    type: array
                    items:
                      type: string
                      example: "String"
                  size_ids:
                    type: array
                    items:
                      type: string
                      example: "String"
                  color_ids:
                    type: array
                    items:
                      type: string
                      example: "String"
                  price:
                    type: number
                    example: 10.5
                  category_id:
                    type: string
                    example: "String"
                  rating:
                    type: number
                    example: 4.5
                  product_status:
                    type: string
                    example: "available"
                  quantity:
                    type: integer
                    example: 100
                  colors:
                    type: array
                    items:
                      type: object
                      properties:
                        color_id:
                          type: string
                          example: "String"
                        color_name:
                          type: string
                          example: "String"
                        color_code:
                          type: string
                          example: "String"
                  sizes:
                    type: array
                    items:
                      type: object
                      properties:
                        size_id:
                          type: string
                          example: "String"
                        size_type:
                          type: string
                          example: "String"
                  category:
                    type: object
                    properties:
                      category_id:
                        type: string
                        example: "String"
                      category_name:
                        type: string
                        example: "String"
        default:
          description: "Error while fetching"
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: "Error while fetching"
              data:
                type: object
                properties:
                example: {}

  /user/cart:
    get:
      summary: "View Cart"
      description: "Fetch products in the user's cart."
      tags:
        - Cart APIs
      parameters:
        - in: header
          name: BEARER Token
          description: "Bearer token for authorization"
          required: true
          example: "BEARER eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiTXVyYWxpIiwiaWF0IjoxNzE4MzQ0ODUwfQ.nWvHIFI3X_ii6J38pdUdkuKTiSeiy5Ly9SAF6VymbI8"
      responses:
        200:
          description: Successful response with cart details
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: Cart details fetched.
              data:
                type: object
                properties:
                  user_id:
                    type: string
                    example: "String"
                  product_details:
                    type: array
                    items:
                      type: object
                      properties:
                        product_id:
                          type: string
                          example: "String"
                        size_id:
                          type: string
                          example: "String"
                        color_id:
                          type: string
                          example: "String"
                        quantity:
                          type: number
                          example: 1
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        product_id:
                          type: string
                          example: "String"
                        product_name:
                          type: string
                          example: "Product Name"
                        images:
                          type: array
                          items:
                            type: string
                            example: ["url1", "url2"]
                        price:
                          type: number
                          example: 99.99
                        category_id:
                          type: string
                          example: "Category ID"
                        size:
                          type: object
                          properties:
                            size_id:
                              type: string
                              example: "Size ID"
                            size_type:
                              type: string
                              example: "Large"
                        quantity:
                          type: number
                          example: 1
                        color:
                          type: object
                          properties:
                            color_id:
                              type: string
                              example: "Color ID"
                            color_name:
                              type: string
                              example: "Red"
                            color_code:
                              type: string
                              example: "#FF0000"
        default:
          description: "Error while fetching cart"
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: "Error while fetching cart"
              data:
                type: object
                properties:
                example: {}

  /user/add-to-cart:
    post:
      summary: Add Product to Cart
      description: >
        Add a product to the user's cart. If the product is already in the cart, update the quantity.
      tags:
        - Cart APIs
      parameters:
        - in: header
          name: BEARER Token
          description: "Bearer token for authorization"
          required: true
          example: "BEARER eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiTXVyYWxpIiwiaWF0IjoxNzE4MzQ0ODUwfQ.nWvHIFI3X_ii6J38pdUdkuKTiSeiy5Ly9SAF6VymbI8"
        - in: body
          name: body
          description: Product details to add to cart
          required: true
          schema:
            type: object
            properties:
              product_id:
                type: string
              quantity:
                type: number
              size_id:
                type: string
              color_id:
                type: string
      responses:
        200:
          description: Successful operation
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: "Product added to Cart."
              data:
                type: object
                properties:
                  cart_size:
                    type: number
                    example: 2
        400:
          description: User or product not found
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: "Error while adding to cart"
              data:
                type: object
                properties:
                example: {}

  /user/remove-from-cart:
    delete:
      summary: Remove Product from Cart
      description: Remove a product from the user's cart.
      tags:
        - Cart APIs
      parameters:
        - in: header
          name: BEARER Token
          description: "Bearer token for authorization"
          required: true
          example: "BEARER eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiTXVyYWxpIiwiaWF0IjoxNzE4MzQ0ODUwfQ.nWvHIFI3X_ii6J38pdUdkuKTiSeiy5Ly9SAF6VymbI8"
        - in: body
          name: body
          description: Product details to remove from cart
          required: true
          schema:
            type: object
            properties:
              product_id:
                type: string
              size_id:
                type: string
              color_id:
                type: string
      responses:
        200:
          description: Successful operation
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: "Product removed from Cart."
              data:
                type: object
        400:
          description: User or product not found
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: "Error while removing from cart"
              data:
                type: object
                properties:
                  reason:
                    type: string
                    example: ""

  /user/calculate-order-amount:
    get:
      summary: Calculate Order Amount
      description: Calculate amount based on products and shipping type.
      tags:
        - Cart APIs
      parameters:
        - in: header
          name: BEARER Token
          description: "Bearer token for authorization"
          required: true
          example: "BEARER eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiTXVyYWxpIiwiaWF0IjoxNzE4MzQ0ODUwfQ.nWvHIFI3X_ii6J38pdUdkuKTiSeiy5Ly9SAF6VymbI8"
        - in: query
          name: shipping_type
          description: Shipping type (e.g., standard, express)
          required: true
          type: string
        - in: query
          name: product_details
          description: details of products
          required: true
          type: array
          items:
            product_id:
                type: string
            quantity:
                type: number
            size_id:
                type: string
            color_id:
                type: string
      responses:
        200:
          description: Successful operation
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: "Amount calculated."
              data:
                type: object
                properties:
                  sub_amount:
                    type: number
                    example: 100.0
                  total_amount:
                    type: number
                    example: 110.0
        400:
          description: User or product not found
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: "Error while calculating"
              data:
                type: object
                example: {}

  /user/wishlist:
    get:
      summary: "View Wishlist"
      description: "Fetch products in the user's wishlist."
      tags:
        - WishList APIs
      parameters:
        - in: header
          name: BEARER Token
          description: "Bearer token for authorization"
          required: true
          example: "BEARER eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiTXVyYWxpIiwiaWF0IjoxNzE4MzQ0ODUwfQ.nWvHIFI3X_ii6J38pdUdkuKTiSeiy5Ly9SAF6VymbI8"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: "Wishlist fetched."
              data:
                type: object
                properties:
                  user_id:
                    type: string
                  product_ids:
                    type: array
                    items:
                      type: string
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        product_id:
                          type: string
                          example: "String"
                        product_name:
                          type: string
                          example: "String"
                        description:
                          type: string
                          example: "String"
                        images:
                          type: array
                          items:
                            type: string
                          example: ["String"]
                        size_ids:
                          type: array
                          items:
                            type: string
                          example: ["String"]
                        color_ids:
                          type: array
                          items:
                            type: string
                          example: ["String"]
                        price:
                          type: number
                          example: 0.0
                        category_id:
                          type: string
                          example: "String"
                        rating:
                          type: number
                          example: 0.0
                        quantity:
                          type: number
                          example: 0
        default:
          description: "Error while fetching wishlist"
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: "Error while fetching wishlist"
              data:
                type: object
                properties:
                example: {}

  /user/add-to-wishlist:
    post:
      summary: "Add Product to Wishlist"
      description: "Add a product to the user's wishlist."
      tags:
        - WishList APIs
      parameters:
        - in: header
          name: BEARER Token
          description: "Bearer token for authorization"
          required: true
          example: "BEARER eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiTXVyYWxpIiwiaWF0IjoxNzE4MzQ0ODUwfQ.nWvHIFI3X_ii6J38pdUdkuKTiSeiy5Ly9SAF6VymbI8"
        - in: body
          name: body
          description: "Product ID to add to wishlist"
          required: true
          schema:
            type: object
            properties:
              product_id:
                type: string
      responses:
        200:
          description: "Successful operation"
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: "Product added to wishlist."
              data:
                type: object
                example: {}
        default:
          description: "Error while adding to wishlist"
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: "Error while adding to wishlist"
              data:
                type: object
                example: {}

  /user/remove-from-wishlist:
    delete:
      summary: "Remove Product from Wishlist"
      description: "Remove a product from the user's wishlist."
      tags:
        - WishList APIs
      parameters:
        - in: header
          name: BEARER Token
          description: "Bearer token for authorization"
          required: true
          example: "BEARER eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiTXVyYWxpIiwiaWF0IjoxNzE4MzQ0ODUwfQ.nWvHIFI3X_ii6J38pdUdkuKTiSeiy5Ly9SAF6VymbI8"
        - in: query
          name: product_id
          description: "Product ID to remove from wishlist"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Successful operation"
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: "Product removed from wishlist."
              data:
                type: object
                example: {}
        default:
          description: "Error while removing from wishlist"
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: "Error while removing from wishlist"
              data:
                type: object
                properties:
                  example: {}
  /user/addresses:
    get:
      summary: Fetch Addresses of User
      description: Fetch addresses associated with the user.
      tags:
        - Customer APIs
      parameters:
        - in: header
          name: BEARER Token
          description: "Bearer token for authorization"
          required: true
          example: "BEARER eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiTXVyYWxpIiwiaWF0IjoxNzE4MzQ0ODUwfQ.nWvHIFI3X_ii6J38pdUdkuKTiSeiy5Ly9SAF6VymbI8"
      responses:
        200:
          description: Successful operation
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: "Addresses fetched."
              data:
                type: object
                properties:
                  addresses:
                    type: array
                    items:
                      type: object
                      properties:
                        first_name:
                          type: string
                          example: "John"
                        last_name:
                          type: string
                          example: "Doe"
                        address_line1:
                          type: string
                          example: "123 Main St"
                        address_line2:
                          type: string
                          example: "Apt 101"
                        city:
                          type: string
                          example: "Anytown"
                        country:
                          type: string
                          example: "USA"
                        pincode:
                          type: string
                          example: "12345"
                        
        400:
          description: User not found
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: "Error while fetching"
              data:
                type: object
                properties:
                example: {}

  /user/add-address:
    post:
      summary: Add User Address
      description: Add another address for the user.
      tags:
        - Customer APIs
      parameters:
        - in: header
          name: BEARER Token
          description: "Bearer token for authorization"
          required: true
          example: "BEARER eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiTXVyYWxpIiwiaWF0IjoxNzE4MzQ0ODUwfQ.nWvHIFI3X_ii6J38pdUdkuKTiSeiy5Ly9SAF6VymbI8"
        - in: body
          name: body
          description: Address details to add
          required: true
          schema:
            type: object
            properties:
              first_name:
                type: string
              last_name:
                type: string
              address_line1:
                type: string
              address_line2:
                type: string
              city:
                type: string
              country:
                type: string
              pincode:
                type: string
      responses:
        200:
          description: Successful operation
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: "Address saved"
              data:
                type: object
        400:
          description: User not found
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: "Error while saving address"
              data:
                type: object
                properties:
                example: {}
  /product/reviews/:product_id:
    get:
      summary: Fetch Reviews of a Product
      description: Fetch reviews associated with a specific product.
      tags:
        - Product APIs
      parameters:
        - in: header
          name: BEARER Token
          description: "Bearer token for authorization"
          required: true
          example: "BEARER eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiTXVyYWxpIiwiaWF0IjoxNzE4MzQ0ODUwfQ.nWvHIFI3X_ii6J38pdUdkuKTiSeiy5Ly9SAF6VymbI8"
        - in: path
          name: product_id
          required: true
          type: string
          description: ID of the product to fetch reviews for.
        
      responses:
        200:
          description: Successful operation
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: "Reviews fetched."
              data:
                type: object
                properties:
                  reviews:
                    type: array
                    items:
                      type: object
                      properties:
                        user_id:
                          type: string
                          example: "user123"
                        title:
                          type: string
                          example: "Great product!"
                        description:
                          type: string
                          example: "This product exceeded my expectations."
                        rating:
                          type: string
                          example: "5"
                        useful_count:
                          type: string
                          example: "10"
                        not_useful_count:
                          type: string
                          example: "2"
                        created_at:
                          type: string
                          format: date-time
                          example: "2024-07-15T10:30:00Z"
                  ratings_count:
                    type: object
                    properties:
                      1stars:
                        type: number
                      2stars:
                        type: number
                      3stars:
                        type: number
                      4stars:
                        type: number
                      5stars:
                        type: number
                    example:
                      1stars: 5
                      2stars: 10
                      3stars: 15
                      4stars: 20
                      5stars: 50
                  average_rating:
                    type: number
                    format: float
                    example: 4.5
        400:
          description: User not found
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: "Error while fetching"
              data:
                type: object
                properties:
                example: {}

  /admin/add-product:
    post:
      summary: Add Product to Database
      description: Add a new product to the database.
      tags:
        - admin
      parameters:
        - in: header
          name: BEARER Token
          description: "Bearer token for authorization"
          required: true
          example: "BEARER eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiTXVyYWxpIiwiaWF0IjoxNzE4MzQ0ODUwfQ.nWvHIFI3X_ii6J38pdUdkuKTiSeiy5Ly9SAF6VymbI8"
        - in: body
          name: body
          description: Product details to add
          required: true
          schema:
            type: object
            properties:
              product_id:
                tyep: string
              product_name:
                type: string
              images:
                type: array
                items:
                  type: string
                  format: base64
              quantity:
                type: number
              size_ids:
                type: array
                items:
                  type: string
              price:
                type: number
              color_ids:
                type: array
                items:
                  type: string
              category_id:
                type: string
              description:
                type: string
      responses:
        200:
          description: Successful operation
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: "Product added Successfully."
              data:
                type: object
                properties:
                  product_id:
                    type: string
                    example: "product123"
        500:
          description: Internal Server Error
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: "Error while adding..."
              data:
                type: object
                properties:
                example: {}

  /admin/edit-product/:product_id:
    put:
      summary: Update Product in Database
      description: Update an existing product in the database.
      tags:
        - admin
      parameters:
        - in: header
          name: BEARER Token
          description: "Bearer token for authorization"
          required: true
          example: "BEARER eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiTXVyYWxpIiwiaWF0IjoxNzE4MzQ0ODUwfQ.nWvHIFI3X_ii6J38pdUdkuKTiSeiy5Ly9SAF6VymbI8"
        - in: body
          name: body
          description: Updated product details
          required: true
          schema:
            type: object
            properties:
              product_name:
                type: string
              images:
                type: array
                items:
                  type: string
                  format: base64
              quantity:
                type: number
              size_ids:
                type: array
                items:
                  type: string
              price:
                type: number
              color_ids:
                type: array
                items:
                  type: string
              category_id:
                type: string
              description:
                type: string
      responses:
        200:
          description: Successful operation
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: "Product details updated Successfully."
              data:
                type: object
        400:
          description: Product not found
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: "Product not found"
              data:
                type: object
                properties:
                  reason:
                    type: string
                    example: ""

  /admin/delete-product/:product_id:
    delete:
      summary: Delete Product from Database
      description: Delete a product from the database.
      tags:
        - admin
      parameters:
        - in: header
          name: BEARER Token
          description: "Bearer token for authorization"
          required: true
          example: "BEARER eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiTXVyYWxpIiwiaWF0IjoxNzE4MzQ0ODUwfQ.nWvHIFI3X_ii6J38pdUdkuKTiSeiy5Ly9SAF6VymbI8"
        - in: query
          name: order_id
          type: string
          required: true
          description: Product ID to delete
      responses:
        200:
          description: Successful operation
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: "Product removed Successfully."
              data:
                type: object
        400:
          description: Product not found
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: "Error while removing product..."
              data:
                type: object
                properties:
                example: {}

  /admin/view-orders:
    get:
      summary: Fetch All Orders from Database
      description: Retrieve details of all orders from the database.
      tags:
        - admin
      parameters:
        - in: header
          name: BEARER Token
          description: "Bearer token for authorization"
          required: true
          example: "BEARER eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiTXVyYWxpIiwiaWF0IjoxNzE4MzQ0ODUwfQ.nWvHIFI3X_ii6J38pdUdkuKTiSeiy5Ly9SAF6VymbI8"
        - in: query
          name: page
          type: number
          required: true
          description: Page number for pagination.
        - in: query
          name: limit
          type: number
          required: true
          description: Maximum number of orders per page.
        - in: query
          name: search
          type: string
          required: false
          description: Optional search string for filtering by user_id or order_id.
      responses:
        200:
          description: Successful operation
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: "All orders details fetched."
              data:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      type: object
                      properties:
                        order_id:
                          type: string
                        user_id:
                          type: string
                  total_pages:
                    type: number
                  current_page:
                    type: number
                  total_orders:
                    type: number
        400:
          description: Error while fetching orders
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: "Error while fetching orders..."
              data:
                type: object
                properties:
                example: {}

  /admin/view-order/:order_id:
    get:
      summary: Fetch Details of a Specific Order
      description: Retrieve details of a specific order from the database.
      tags:
        - admin
      parameters:
        - in: header
          name: BEARER Token
          description: "Bearer token for authorization"
          required: true
          example: "BEARER eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiTXVyYWxpIiwiaWF0IjoxNzE4MzQ0ODUwfQ.nWvHIFI3X_ii6J38pdUdkuKTiSeiy5Ly9SAF6VymbI8"
        - in: query
          name: order_id
          type: string
          required: true
          description: ID of the order to fetch details for.
      responses:
        200:
          description: Successful operation
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: true
              message:
                type: string
                example: "Order details fetched."
              data:
                type: object
                properties:
                  order_id:
                    type: string
                  user_id:
                    type: string
                  product_details:
                    type: array
                    items:
                      type: object
                      properties: {}
                  created_at:
                    type: string
                    format: date-time
                  delivery_date:
                    type: string
                    format: date-time
                  payment_status:
                    type: string
                  delivery_status:
                    type: string
        400:
          description: Order not found
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: "Error while fetching order details..."
              data:
                type: object
                example: {}

  /user/create-order:
    post:
      summary: Create an order
      tags:
        - Order APIs
      parameters:
        - in: header
          name: BEARER Token
          description: "Bearer token for authorization"
          required: true
          example: "BEARER eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiTXVyYWxpIiwiaWF0IjoxNzE4MzQ0ODUwfQ.nWvHIFI3X_ii6J38pdUdkuKTiSeiy5Ly9SAF6VymbI8"
        - in: body
          schema:
              type: object
              properties:
                amount:
                  type: number
                  format: float
                shipping_type:
                  type: string
                address:
                  type: object
                product_details:
                  type: array
                  items:
                    type: object
                    properties:
                      product_id:
                        type: string
                      size_id:
                        type: string
                      quantity:
                        type: integer
                      color_id:
                        type: string
              required:
                - amount
                - shipping_type
                - address
                - product_details
      responses:
        '200':
          description: Successful operation
          schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: order created
                  data:
                    type: object
                    example: paymentIntentObj
        'default':
          description: Order creation failed
          schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Order creation failed
                  data:
                    type: object
                    properties:
                      reason:
                        type: string
                        example: "Invalid product details"
  /webhook:
    post:
      summary: Verify payment webhook
      tags:
        - Order APIs
      parameters:
        - in: body
          schema:
              type: object
              properties:
                event:
                  type: object
      responses:
        '200':
          description: Successful operation
          schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
        'default':
          description: Webhook processing failed
          schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false